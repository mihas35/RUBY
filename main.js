//C√≥digo elaborado por (https://github.com/AzamiJs)

const fs = require('fs')
const axios = require('axios')
const { exec, spawn, execSync } = require('child_process')
const speed = require('performance-now')
const chalk = require('chalk')
const yargs = require('yargs/yargs')
const _ = require('lodash')
const moment = require('moment')
const gradient = require('gradient-string')
const crypto = require('crypto')
const { format } = require('util')
const Jimp = require('jimp')
const path = require('path')
const fetch = require('node-fetch')
const { performance } = require('perf_hooks')
const osu = require('node-os-utils')
const PhoneNumber = require('awesome-phonenumber')
const yts = require('yt-search')
const ytdl = require('ytdl-core')
const FormData = require('form-data') 
const { youtubedl, youtubedlv2 } = require('@bochilteam/scraper');
const { WA_DEFAULT_EPHEMERAL, getAggregateVotesInPollMessage, generateWAMessageFromContent,  proto,  generateWAMessageContent, generateWAMessage,  prepareWAMessageMedia,  downloadContentFromMessage,  areJidsSameUser,  getContentType } = require('@whiskeysockets/baileys')
const {  smsg,  getGroupAdmins,  clockString,  sleep,  getBuffer, runtime, fetchJson, isUrl } = require('./lib/func')
require('./settings.js')

const msgs = (message) => {
return message.length >= 10 ? message.substring(0, 500) : message
}

module.exports = client = async (client, m, mesaages, store) => {
try {
const { type, quotedMsg, mentioned, now, fromMe } = m
var body = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.message.listResponseMessage && m.message.listResponseMessage.singleSelectReply.selectedRowId.startsWith('.') && m.message.listResponseMessage.singleSelectReply.selectedRowId) ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ''

m.isBot = m.id.startsWith('Lyru-') || m.id.startsWith('EvoGlobalBot-') && m.id.startsWith('FizzxyTheGreat-') && m.id.startsWith('BAE5') && m.id.length === 16 || m.id.startsWith('3EB0') && m.id.length === 12 || m.id.startsWith('3EB0') && (m.id.length === 20 || m.id.length === 22) || m.id.startsWith('B24E') && m.id.length === 20;
if (m.isBot) return 

/**
 * Returns early if ID starts with 'NJX-' due to Baileys' different generateId system.
 * @param {Object} m - The object containing the ID to check.
 * @returns {void} - Returns early if ID starts with 'NJX-', otherwise continues with the function.
 */
if (m.id.startsWith('NJX-')) return;

var budy = (typeof m.text == 'string' ? m.text : '')
var prefix = prefa ? /^[¬∞‚Ä¢œÄ√∑√ó¬∂‚àÜ¬£¬¢‚Ç¨¬•¬Æ‚Ñ¢+‚úì_=|~!?@#$%^&.¬©^]/gi.test(body) ? body.match(/^[¬∞‚Ä¢œÄ√∑√ó¬∂‚àÜ¬£¬¢‚Ç¨¬•¬Æ‚Ñ¢+‚úì_=|~!?@#$%^&.¬©^]/gi)[0] : '' : prefa ?? global.prefix

const command = body.slice(prefix.length).trim().split(/\s+/)[0].toLowerCase()
const args = body.trim().split(/\s+/).slice(1)
const chatContent = (() => {
const messageTypes = { 'conversation': m.message.conversation, 'imageMessage': m.message.imageMessage?.caption, 'documentMessage': m.message.documentMessage?.caption, 'videoMessage': m.message.videoMessage?.caption, 'extendedTextMessage': m.message.extendedTextMessage?.text, 'buttonsResponseMessage': m.message.buttonsResponseMessage?.selectedButtonId, 'templateButtonReplyMessage': m.message.templateButtonReplyMessage?.selectedId, 'listResponseMessage': m.message.listResponseMessage?.singleSelectReply?.selectedRowId, 'messageContextInfo': m.message.listResponseMessage?.singleSelectReply?.selectedRowId }; return messageTypes[m.mtype] || '' })()
const pushname = m.pushName || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'
const text = args.join(' ')
const q = args.join(" ") 
const quoted = m.quoted || m
const mime = (quoted.msg || quoted).mimetype || ''
const isMedia = /image|video|sticker|audio/.test(mime)
const from = m.key.remoteJid
const isCreator = global.owner.some(([number]) => number.replace(/[^\d\s().+:]/g, '').replace(/\s/g, '') + '@s.whatsapp.net' === m.sender)
const isbot = await client.decodeJid(client.user.id)
const sender = m.isGroup ? (m.key.participant || m.participant) : m.key.remoteJid
const groupMetadata = m.isGroup ? await client.groupMetadata(from).catch(e => {}) : ''
const groupName = m.isGroup ? groupMetadata.subject : ''
const participants = m.isGroup ? await groupMetadata.participants : ''
const groupAdmins = m.isGroup ? await getGroupAdmins(participants) : ''
const isBotAdmins = m.isGroup ? groupAdmins.includes(isbot) : false
const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
const isAnti = true

const fkontak = { key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: `6285600793871-1614953337@g.us` } : {}) }, message: { 'contactMessage': { 'displayName': `${pushname}`, 'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;${pushname},;;;\nFN:${pushname},\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`, 'jpegThumbnail': null, thumbnail: null,sendEphemeral: true}}}

//Base de datos
let user = global.db.data.users[m.sender]
let chats = global.db.data.chats[m.chat]

let isNumber = x => typeof x === 'number' && !isNaN(x)
if (typeof user !== 'object') global.db.data.users[m.sender] = {}
if (user) {
if (!('lenguaje' in user)) user.lenguaje = 'es'
if (!('registered' in user)) user.registered = false

if (!user.registered) {
if (!('name' in user)) user.name = m.name
if (!isNumber(user.age)) user.age = -1
if (!isNumber(user.regTime)) user.regTime = -1
}
if (!isNumber(user.limit)) user.limit = 20
if(!isNumber(user.premium)) user.premium = false
} else global.db.data.users[m.sender] = { limit: 20 }

if (typeof chats !== 'object') global.db.data.chats[m.chat] = {}
if (chats) {
if (!('welcome' in chats)) chats.welcome = true
if (!('antilink' in chats)) chats.antilink = false
if (!('antifake' in chats)) chats.antifake = false  
if (!('detect' in chats)) chats.detect = true 	
if (!('mute' in chats)) chats.mute = false
} else global.db.data.chats[m.chat] = {
welcome: true,
antilink: false,
antifake: false,
detect: true, 	
mute: false
}
let setting = global.db.data.settings[client.user.jid] || {};
if (typeof setting !== 'object') global.db.data.settings[client.user.jid] = {}  
if (setting) {  
if (!isNumber(setting.status)) setting.status = 0  
if (!('self' in setting)) setting.self = false;
if (!('autobio' in setting)) setting.autobio = true
} else global.db.data.settings[client.user.jid] = {  
status: 0,  
self: false,
autobio: true
} 

//console
if (m.message) {
const fecha = chalk.bold.magentaBright(`\nFecha: ${chalk.whiteBright(moment().format('–î–î/–ú–ú/–ì–ì–ß–ß:–º–º:—Å—Å'))}`)
const mensaje = chalk.bold.greenBright(`\nMensaje: ${chalk.whiteBright(msgs(m.text))}`)
const usuario = chalk.bold.blueBright(`\nUsuario: ${chalk.yellowBright(pushname)}`)
const remitente = chalk.bold.redBright(`\nRemitente: ${gradient('deepskyblue', 'darkorchid')(sender)}`)
const grupo = m.isGroup ? chalk.bold.cyanBright(`\nGrupo: ${chalk.greenBright(groupName)}\nID: ${gradient('violet', 'midnightblue')(from)}`) : chalk.bold.redBright('\nChat privado\n')
console.log(`${fecha}${mensaje}${usuario}${remitente}${grupo}`)
}

//--------------------[ AUTOBIO ]----------------------- 
/*if (global.db.data.settings[client.user.jid].autobio) {
let setting = global.db.data.settings[client.user.jid]
if (new Date() * 1 - setting.status > 1000) {
let uptime = await runtime(process.uptime())
var timestamp = speed();   
var latensi = speed() - timestamp 
let bio = `${wm} || üíª ${runtime(process.uptime())} || üë•Ô∏è ${Object.keys(global.db.data.users).length}`
try {
await client.updateProfileStatus(bio)
setting.status = new Date() * 1 
} catch {
console.log(latensi.toFixed(4)) 
}}} */

//interactive button
if (m.mtype === 'interactiveResponseMessage') {   
let msg = m.message[m.mtype]  || m.msg
if (msg.nativeFlowResponseMessage && !m.isBot ) { 
let { id } = JSON.parse(msg.nativeFlowResponseMessage.paramsJson) || {}  
if (id) {
let emit = { 
key : { ...m.key } , 
message:{ extendedTextMessage : { text : id } } ,
pushName : m.pushName,
messageTimestamp  : m.messageTimestamp || 754785898978
}
return client.ev.emit('messages.upsert', { messages : [ emit ] ,  type : 'notify'})
}}}

//antilink all
if (global.db.data.chats[m.chat].antilink && groupMetadata) {
let linksProhibidos = {
'—Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ ': /telegram\.me|t\.me/gi,
'facebook': /facebook\.com/gi,
'whatsapp': /chat\.whatsapp\.com/gi,
'youtube': /youtu\.be|youtube\.com/gi
}
function vl(mensaje, tiposEnlaces) {
for (let tipo of tiposEnlaces) {
if (mensaje.match(linksProhibidos[tipo])) {
return true
}
}
return false
}
let EnlacesProhibidos = ['whatsapp', 'telegram']
if (vl(m.text, EnlacesProhibidos)) {
if (!isBotAdmins) return m.reply('–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤')
let gclink = (`https://chat.whatsapp.com/` + await client.groupInviteCode(m.chat))
let isLinkThisGc = new RegExp(gclink, 'i')
let isgclink = isLinkThisGc.test(m.text)
if (isgclink) return client.sendMessage(m.chat, { text: `–°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç *${groupName}*` }, { quoted: m })
if (isAdmins) return client.sendMessage(m.chat, { text: '–Ø –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' }, { quoted: m })
await client.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant } })
client.sendMessage(from, { text: `–ê–Ω—Ç–∏ –°—Å—ã–ª–∫–∏\n\n@${m.sender.split('@')[0]} –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É`, contextInfo: { mentionedJid: [sender] } }, { quoted: m })
client.groupParticipantsUpdate(m.chat, [m.sender], '—É–¥–∞–ª–∏—Ç—å')
}
}

//antifake
if (global.db.data.chats[m.chat].antifake && !isAdmins) {
let forbidPrefixes = ['965', '966', '971', '974', '212', '213', '216', '44', '1', '62', '61', '64', '353', '33', '32', '41', '352', '377', '351', '244', '258', '91', '977', '880', '92', '94', '960', '7', '380', '375', '998', '996', '373', '374', '994', '992', '62', '49', '43', '39', '378', '379', '86', '886', '852', '853', '65', '850', '82', '93', '98', '48', '84', '856', '855', '254', '255', '256', '250', '257', '258', '252', '269', '243', '90', '998', '60', '222', '27', '265']
for (let prefix of forbidPrefixes) {
if (m.sender.startsWith(prefix)) {
await m.reply('*A–Ω—Ç–∏-—Ñ–µ–π–∫* –∞–∫—Ç–∏–≤–Ω—ã–π')
client.groupParticipantsUpdate(m.chat, [m.sender], '—É–¥–∞–ª–∏—Ç—å')}}}
  
switch (prefix && command) {

//Herramientas 
case 'traducir': 
case 'translate': 
case 'tr': {
const translate = require('@vitalets/google-translate-api')
let codesidioma = 'üá≤üáΩ *Espa√±ol:* es\nüè¥ *Welsh:* cy\nüáªüá≥ *Vietnamese:* vi\nüáπüá∑ *Turkish:* tr\nüáπüá≠ *Thai:* th\nüá∞üá¨ *Tamil:* ta\nüá∏üá™ *Swedish:* sv\nüá∞üá™ *Swahili:* sw\nüá∏üá∞ *Slovak:* sk\nüá∑üá∏ *Serbian:* sr\nüá∑üá∫ *Russian:* ru\nüá∑üá¥ *Romanian:* ro\nüáµüáπ *Portuguese:* pt\nüáµüá± *Polish:* pl\nüá≥üá¥ *Norwegian:* no\nüá≤üá∞ *Macedonian:* mk\nüá±üáª *Latvian:* lv\nüáªüá¶ *Latin:* la\nüá∞üá∑ *Korean:* ko\nüáØüáµ *Japanese:* ja\nüáÆüáπ *Italian:* it\nüáÆüá© *Indonesian:* id\nüáÆüá∏ *Icelandic:* is\nüá≠üá∫ *Hungarian:* hu\nüáÆüá≥ *Hindi:* hi\nüá≠üáπ *Haitian Creole:* ht\nüá¨üá∑ *Greek:* el\nüá©üá™ *German:* de\nüá´üá∑ *French:* fr\nüá´üáÆ *Finnish:* fi\nüá®üá® *Esperanto:* eo\nüá¨üáß *English:* en\nüá≥üá± *Dutch:* nl\nüá©üá∞ *Danish:* da\nüá®üáø *Czech:* cs\nüá≠üá∑ *Croatian:* hr\nüá®üá≥ *Chinese:* zh\nüá≤üá∞ *Catalan:* ca\nüá¶üá≤ *Armenian:* hy\nüá¶üá™ *Arabic:* ar\nüá¶üá± *Albanian:* sq\nüáøüá¶ *Afrikaans:* af'

if (!args || !args[0]) {
return m.reply('Ingrese el *c√≥digo* del idioma m√°s el *texto* que desea traducir\n\n`Ejemplo`: .translate ru Hola, ¬øc√≥mo est√°s?')
}

let lang = args[0]
let text = args.slice(1).join(' ')
const defaultLang = 'es'

if ((args[0] || '').length !== 2) {
lang = defaultLang
text = args.join(' ')
m.reply('–ë—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π *–∫–æ–¥* —è–∑—ã–∫–∞*. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–∞–Ω—Å–∫–∏–π).')
}

if (!text && m.quoted && m.quoted.text) text = m.quoted.text

try {
const result = await translate(`${text}`, {to: lang, autoCorrect: true})
await m.reply(`${result.text}`)
} catch {
try {
const lol = await fetch(`https://api.lolhuman.xyz/api/translate/auto/${lang}?apikey=${lolkey}&text=${text}`)
const loll = await lol.json()
const result2 = loll.result.translated
await m.reply(`${result2}`)
} catch (e) {
await m.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: ' + e)
}}}
break

case 'hd':
case 'remini': 
case 'calidad': {
const FormData = require('form-data') 
const Jimp =  require('jimp')

let q = m.quoted ? m.quoted : m
let mime = (q.msg || q).mimetype || q.mediaType || ''

if (!mime) {
return m.reply(`–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∂–µ * –∫–æ–º–∞–Ω–¥—ã* (${prefix + command})`)
}

if (!/image\/(jpe?g|png)/.test(mime)) {
return m.reply(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø * –Ω–æ—Å–∏—Ç–µ–ª—è* `)
}

m.reply('`–ó–∞–≥—Ä—É–∑–∫–∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`') 
try {
let img = await q.download?.()
let pr = await remini(img, '—É—Å–∏–ª–∏—Ç—å')
client.sendMessage(m.chat, { image: pr, caption: `–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ` }, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100 })
} catch (e) {
return m.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:' + e) 
}
}
break

case 'ia': case 'chatgpt': {
if (!text) return m.reply(`Ingrese lo que *desea* preguntar a *ChatGPT*\n\n\`Ejemplo\`: ${prefix + command} ¬øQu√© es la teolog√≠a?`)
try {
client.sendPresenceUpdate('composing', from)
let gpt = await fetch(`${apis}/ia/gptweb?text=${text}`) 
let res = await gpt.json()
await await m.reply(res.data)
} catch (e) {
return m.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ' + e)
}}
break

case "deepseek": case "ia3": {
if (!text) return m.reply(`–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ * –≤—ã * —Ö–æ—Ç–∏—Ç–µ * —Å–ø—Ä–æ—Å–∏—Ç—å * –ì–ª—É–±–æ–∫–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ –ö–∞—è*\n\n\`–ü—Ä–∏–º–µ—Ä\`: ${prefix + command}–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–æ–ª–æ–≥–∏—è?`)
client.sendPresenceUpdate('composing', from)
let { data } = await axios.get(`https://archive-ui.tanakadomp.biz.id/ai/deepseek?text=${text}`)
await m.reply(data?.result || '‚ùå–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek AI –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ –±—ã–ª–æ.')
}
break

case "gemini": {
if (!text) return m.reply(`Ingrese lo que *desea* preguntar a *Gemini*\n\n\`Ejemplo\`: ${prefix + command} ¬øQu√© es la teolog√≠a?`)
client.sendPresenceUpdate('composing', from)
let gpt = await fetch(`https://api.dorratz.com/ai/gemini?prompt=${text}`)
let res = await gpt.json()
await m.reply(res.message)}
break

case "copilot": case "bing": {
if (!text) return m.reply(`Ingrese lo que *desea* preguntar a *copilot*\n\n\`Ejemplo\`: ${prefix + command} ¬øQu√© es la teolog√≠a?`)
client.sendPresenceUpdate('composing', from)
let gpt = await fetch(`https://api.dorratz.com/ai/bing?prompt=${text}`)
let res = await gpt.json()
m.reply(res.result.ai_response)}
break

//buscadores
case 'google': case 'googleit': {
const google = require('google-it')
if (!text) return m.reply(`Ingrese algo *relevante* de lo que desea obtener *informaci√≥n*\n\n\`Ejemplo\`: ${prefix + command} Noticias n+`)
try {
const res = await fetch(`https://delirius-apiofc.vercel.app/search/googlesearch?query=${text}`);
const data = await res.json();
    
if (data.status && data.data && data.data.length > 0) {
let teks = `\t\t\t\t\t\t\t *‚Äπ* Google Search‚Äòs *‚Ä∫*\n\n`;
for (let result of data.data) {
teks += `*¬∑ T√≠tulo:* ${result.title}\n*¬∑ Enlace:* ${result.url}\n*¬∑ Descripci√≥n:* ${result.description}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
}                
client.sendMessage(m.chat, { video: { url: 'https://qu.ax/cPnS.mp4' }, gifPlayback: true, caption: teks }, { quoted: m })
}} catch (error) {
try {
google({ 'query': text }).then(res => {
let teks = `\t\t\t\t\t\t\t *‚Äπ* Google Search‚Äòs *‚Ä∫*\n\n`
res.forEach((g, index) => {
teks += `\`${index + 1}\`\n\n`
teks += `*¬∑ T√≠tulo:* ${g.title}\n`
teks += `*¬∑ Descripci√≥n:* ${g.snippet}\n`
teks += `*¬∑ Enlace:* ${g.link}\n\n`
})
client.sendMessage(m.chat, { video: { url: 'https://qu.ax/cPnS.mp4' }, gifPlayback: true, caption: teks }, { quoted: m })
}).catch(err => {
})
} catch (e) {
m.reply('Ha ocurrido un error al realizar la b√∫squeda: ' + e)
}}}
break

case '—é—Ç—É–±':
case 'ytsearch': {
if (!text) {
return m.reply('–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* * –≤–∏–¥–µ–æ*\n\n`–ü—Ä–∏–º–µ—Ä`: .—é—Ç—É–± –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –æ–±–æ–∏—Ö-MD')
}

let ress = await yts(`${text}`)
let armar = ress.all
const Ibuff = await getBuffer(armar[0].image)
let teks2 = armar.map(v => {
switch (v.type) {
case '–≤–∏–¥–µ–æ': return `
–ó–∞–≥–æ–ª–æ–≤–æ–∫: *${v.title}* 
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${v.timestamp}
–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π: ${v.ago}
–í–∏–¥: ${v.views}
Url: ${v.url}
`.trim()
case '–∫–∞–Ω–∞–ª': return `
–ö–∞–Ω–∞–ª: *${v.name}*
Url: ${v.url}
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${v.subCountLabel} (${v.subCount})
–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${v.videoCount}
`.trim()
}
}).filter(v => v).join('\n----------------------------------------\n')
client.sendMessage(m.chat, { image: Ibuff, caption: teks2 }, { quoted: m })
.catch((err) => {
m.reply('–û—à–∏–±–∫–∞')
})
}
break

//info
case '–º–µ–Ω—é':
case '–ø–æ–º–æ—â—å':
case '–≤—Å–µ–º–µ–Ω—é': {
const texto = `–ú–µ–Ω—é-RUBY

‚îå  ‚ó¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚îÇ  ‚ó¶ ${prefix}—Å—Ü–µ–Ω–∞—Ä–∏–π
‚îÇ  ‚ó¶ ${prefix}—Å–∫–æ—Ä–æ—Å—Ç—å
‚îî  ‚ó¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

‚îå  ‚ó¶ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
‚îÇ  ‚ó¶ ${prefix}–≤–∫–ª—é—á–∏—Ç—å
‚îÇ  ‚ó¶ ${prefix}–≤—ã–∫–ª—é—á–∏—Ç—å
‚îî  ‚ó¶ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å

‚îå  ‚ó¶ –†–∞–∑–≥—Ä—É–∑–∫–∏
‚îÇ  ‚ó¶ ${prefix}–ø–ª–µ–π
‚îÇ  ‚ó¶ ${prefix}–ø–ª–µ–π –∞—É–¥–∏–æ
‚îÇ  ‚ó¶ ${prefix}–ø–ª–µ–π –≤–∏–¥–µ–æ
‚îî  ‚ó¶ –†–∞–∑–≥—Ä—É–∑–∫–∏

‚îå  ‚ó¶ –ì—Ä—É–ø–ø–∞
‚îÇ  ‚ó¶ ${prefix}–∞–¥–º–∏–Ω—ã
‚îÇ  ‚ó¶ ${prefix}–≥—Ä—É–ø–ø–∞
‚îÇ  ‚ó¶ ${prefix}–ø–æ–Ω–∏–∑–∏—Ç—å
‚îÇ  ‚ó¶ ${prefix}–ø—Ä–∏–∑—Ä–∞–∫–∏
‚îÇ  ‚ó¶ ${prefix}—É–¥–∞–ª–∏—Ç—å
‚îÇ  ‚ó¶ ${prefix}—Å—Å—ã–ª–∫–∞
‚îÇ  ‚ó¶ ${prefix}–ø–æ–≤—ã—Å–∏—Ç—å
‚îÇ  ‚ó¶ ${prefix}–≤—ã–∑–æ–≤
‚îî  ‚ó¶ –ì—Ä—É–ø–ø–∞

‚îå  ‚ó¶ –°—Ç–∏–∫–µ—Ä—ã
‚îÇ  ‚ó¶ ${prefix}—Å
‚îî  ‚ó¶ –°—Ç–∏–∫–µ—Ä—ã

‚îå  ‚ó¶ –í–ª–∞–¥–µ–ª–µ—Ü
‚îÇ  ‚ó¶ ${prefix}update
‚îÇ  ‚ó¶ ${prefix}—Å–æ–µ–¥–∏–Ω—è—Ç—å
‚îî  ‚ó¶ –í–ª–∞–¥–µ–ª–µ—Ü`
await client.sendMessage(m.chat, {text: texto, contextInfo: { forwardingScore: 999, isForwarded: true, forwardedNewsletterMessageInfo: { newsletterName: 'CuriosityBot', newsletterJid: "120363167110224268@newsletter", }, externalAdReply: { title: `¬© CuriosityBot-MD`, body: '', thumbnailUrl: 'https://qu.ax/lFTW.jpeg', sourceUrl: 'https://github.com/AzamiJs', mediaType: 1, renderLargerThumbnail: true }}}, {quoted: fkontak})
}
break

case '—Å–∫–æ—Ä–æ—Å—Ç—å': {
const girastamp = speed()
const latensi = speed() - girastamp
const _muptime = process.uptime() * 1000
const muptime = clockString(_muptime)
m.reply(`–í—Ä–µ–º—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è *${latensi.toFixed(4)}*\n\n–í—Ä–µ–º—è –±–µ–∑–æ—Ç–∫–∞–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã *${muptime}*`)
}
break

case 'sc': case '—Å—Ü–µ–Ω–∞—Ä–∏–π': case 'git': {
try {
let res = await fetch('https://api.github.com/repos/AzamiJs/CuriosityBot-MD')
let json = await res.json()
let git = `*‰πÇ  –ë–æ—Ç  -  —Å—Ü–µ–Ω–∞—Ä–∏–π*\n\n¬∑ *–Ω–æ–º–µ—Ä*: ${json.name}\n¬∑ *–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏*: ${json.watchers_count}\n¬∑ *–í–µ—Å*: ${(json.size / 1024).toFixed(2)} MB\n¬∑ *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π*: ${moment(json.updated_at).format('–î–î/–ú–ú/–ì–ì - –ß–ß:–º–º:—Å—Å')}\n¬∑ *Url* : ${json.html_url}\n\n	   ${json.forks_count} Forks ¬∑ ${json.stargazers_count} Stars ¬∑ ${json.open_issues_count} Issues`
await client.sendMessage(m.chat, {text: git, contextInfo: { forwardingScore: 999, isForwarded: true, forwardedNewsletterMessageInfo: { newsletterName: 'RUBYBot', newsletterJid: "120363167110224268@newsletter", }, externalAdReply: { title: `¬© CuriosityBot-MD`, body: '', thumbnailUrl: 'https://qu.ax/lFTW.jpeg', sourceUrl: 'https://github.com/AzamiJs', mediaType: 1, renderLargerThumbnail: true }}}, {quoted: fkontak})
} catch (e) {
m.reply(e)
}
}
break

case 'speedtest': case 'speed': {
const cp = require('child_process') 
const {promisify} = require('util') 
const exec = promisify(cp.exec).bind(cp)
let o
m.reply('> Cargando... üöÄüöÄüöÄ')
try {
o = await exec('python3 speed.py --secure --share')
const {stdout, stderr} = o;
if (stdout.trim()) {
const match = stdout.match(/http[^"]+\.png/)
const urlImagen = match ? match[0] : null
await client.sendMessage(m.chat, {image: {url: urlImagen}, caption: stdout.trim()}, {quoted: m})}
if (stderr.trim()) { 
const match2 = stderr.match(/http[^"]+\.png/)
const urlImagen2 = match2 ? match2[0] : null 
await client.sendMessage(m.chat, {image: {url: urlImagen2}, caption: stderr.trim()}, {quoted: m})
}} catch (e) {
o = e.message
return m.reply(o)
console.log(e)}}
break 

//enable on/off
case '–≤–∫–ª—é—á–∏—Ç—å':
case '–≤—ã–∫–ª—é—á–∏—Ç—å': {
if (!m.isGroup) {
return m.reply(mess.group)
}
if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}
if (!isAdmins) {
return m.reply(mess.admin)
}

if (!text) {
let txt = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö * –Ω–∞—Å—Ç—Ä–æ–µ–∫*'
let listSections = []    
listSections.push({
title: '',
rows: [
{ header: '', title: 'üü¢| Activar Antilink', id: `.–≤–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞`, description: `` }, 
{ header: '', title: 'üî¥| Desactivar Antilink', id: `.–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞`, description: `` },
{ header: '', title: 'üü¢| Activar Antifake', id: `.–≤–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ñ–µ–π–∫`, description: `` }, 
{ header: '', title: 'üî¥| Desactivar Antifake', id: `.–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Ñ–µ–π–∫`, description: `` },
{ header: '', title: 'üü¢| Activar Welcome', id: `.–≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`, description: `` }, 
{ header: '', title: 'üî¥| Desactivar Welcome', id: `.–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`, description: `` }
]})

await client.sendList(m.chat, txt, null, `Configuraciones`, listSections, { mentions: [sender]}, { quoted: fkontak })
return
}

let setting = text.trim().toLowerCase()

switch (setting) {
case '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞':
if (command === '–≤–∫–ª—é—á–∏—Ç—å') {
if (db.data.chats[m.chat].antilink) {
return m.reply('–§—É–Ω–∫—Ü–∏—è * –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞ * —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ *–≤–∫–ª—é—á–µ–Ω–∞*')
}
db.data.chats[m.chat].antilink = true
m.reply('–§—É–Ω–∫—Ü–∏—è *–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞ * –±—ã–ª–∞*–≤–∫–ª—é—á–µ–Ω–∞*')
} else if (command === '–≤—ã–∫–ª—é—á–∏—Ç—å') {
if (!db.data.chats[m.chat].antilink) {
return m.reply('—Ñ—É–Ω–∫—Ü–∏—è *–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞* —É–∂–µ *–≤—ã–∫–ª—é—á–µ–Ω–∞*')
}
db.data.chats[m.chat].antilink = false
m.reply('–§—É–Ω–∫—Ü–∏—è * –∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞ * –±—ã–ª–∞ * –æ—Ç–∫–ª—é—á–µ–Ω–∞*')
break
}

case '–∞–Ω—Ç–∏—Ñ–µ–π–∫':
if (command === '–≤–∫–ª—é—á–∏—Ç—å') {
if (db.data.chats[m.chat].antifake) {
return m.reply('—Ñ—É–Ω–∫—Ü–∏—è *–∞–Ω—Ç–∏—Ñ–µ–π–∫* —É–∂–µ *–≤–∫–ª—é—á–µ–Ω–∞*')
}
db.data.chats[m.chat].antifake = true
m.reply('—Ñ—É–Ω–∫—Ü–∏—è *–∞–Ω—Ç–∏—Ñ–µ–π–∫* –±—ã–ª–∞ *–≤–∫–ª—é—á–µ–Ω–∞*')
} else if (command === '–≤—ã–∫–ª—é—á–∏—Ç—å') {
if (!db.data.chats[m.chat].antifake) {
return m.reply('–§—É–Ω–∫—Ü–∏—è * –ê–Ω—Ç–∏—Ñ–µ–π–∫ * —É–∂–µ * –æ—Ç–∫–ª—é—á–µ–Ω–∞*')
}
db.data.chats[m.chat].antifake = false
m.reply('–§—É–Ω–∫—Ü–∏—è * –ê–Ω—Ç–∏—Ñ–µ–π–∫ * —É–∂–µ * –æ—Ç–∫–ª—é—á–µ–Ω–∞*')
break
}

case '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ':
if (command === '–≤–∫–ª—é—á–∏—Ç—å') {
if (db.data.chats[m.chat].welcome) {
return m.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ * —Å–æ–æ–±—â–µ–Ω–∏–µ * —É–∂–µ * –≤–∫–ª—é—á–µ–Ω–æ*')
}
db.data.chats[m.chat].welcome = true
m.reply('*–°–æ–æ–±—â–µ–Ω–∏–µ* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ *–≤–∫–ª—é—á–µ–Ω–æ*')
} else if (command === '–≤—ã–∫–ª—é—á–∏—Ç—å') {
if (!db.data.chats[m.chat].welcome) {
return m.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ * —Å–æ–æ–±—â–µ–Ω–∏–µ * —É–∂–µ * –æ—Ç–∫–ª—é—á–µ–Ω–æ*')
}
db.data.chats[m.chat].welcome = false
m.reply('*–°–æ–æ–±—â–µ–Ω–∏–µ* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ *–û—Ç–∫–ª—é—á–µ–Ω–æ*')
break
}

default:
m.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞`, `–∞–Ω—Ç–∏—Ñ–µ–π–∫`, `–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`\n\n- .–≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n- .–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
break
}
}
break

//descargar
case '–ø–ª–µ–π': {
const fetch = require('node-fetch')
const { ytmp3, ytmp4 } = require("@hiudyy/ytdl");
const yts = require('yt-search');
const { sanitizeFileName } = require('./lib/func')
if (!text) return m.reply('*–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–∏–ø –Ω–æ—Å–∏—Ç–µ–ª—è*\n–ø—Ä–∏–º–µ—Ä: ` –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏ –∑–≤—É–∫ —ç—Ç–∏—Ö –≥–ª–∞–∑`\n\n–°–æ–≤–µ—Ç—ã: `–∞—É–¥–∏–æ`, `–≤–∏–¥–µ–æ`');

const [selection, ...queryParts] = text.split(' ');
const query = queryParts.join(' ');
const validSelections = ['–∞—É–¥–∏–æ', '–≤–∏–¥–µ–æ'];
try {
if (!query) return m.reply('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
if (!validSelections.includes(selection.toLowerCase())) return m.reply(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø. –ò—Å–ø–æ–ª—å–∑—É–π: ${validSelections.join(', ')}`);
m.reply(mess.wait);
const search = await yts(query);
if (!search.videos.length) return m.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
const video = search.videos[0];
const url = video.url;
        
const sendVideoInfo = async () => {
const ytMsg = `*‚óè –ó–∞–≥–æ–ª–æ–≤–æ–∫:* ${video.title}\n\nüëÄ –í–∏–¥: ${video.views}\n‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${video.timestamp}\nüåê –°–≤—è–∑—å: ${url}`;
await client.sendMessage(m.chat, { image: { url: video.thumbnail }, caption: ytMsg }, { quoted: m });
};
await sendVideoInfo();

switch(selection.toLowerCase()) {
case '–∞—É–¥–∏–æ': {
try {
const audio = await ytmp3(url);
await client.sendMessage(m.chat, {audio: audio, mimetype: '–∞—É–¥–∏–æ/mpeg', fileName: `${sanitizeFileName(video.title)}.mp3`}, { quoted: m });
} catch (e) {
try {  
const res = await fetch(`https://api.siputzx.my.id/api/d/ytmp3?url=${url}`);
let { data } = await res.json();
await client.sendMessage(m.chat, { audio: { url: data.dl }, mimetype: 'audio/mpeg' }, { quoted: m});
} catch (e) {    
m.reply(e)
}}
break;
}
            
case '–≤–∏–¥–µ–æ': {
try {
const videoData = await ytmp4(url);
await client.sendMessage(m.chat, { 
video: { url: videoData }, mimetype: '–≤–∏–¥–µ–æ/mp4',caption: video.title}, { quoted: m });
} catch (e) {
try {  
const res = await fetch(`https://api.siputzx.my.id/api/d/ytmp4?url=${url}`);
let { data } = await res.json();
await client.sendMessage(m.chat, { video: { url: data.dl }, fileName: `–≤–∏–¥–µ–æ.mp4`, mimetype: '–≤–∏–¥–µ–æ/mp4', caption: video.title }, { quoted: m })
} catch (e) {    
m.reply(e)
}}
break;
}
            
case 'mp3doc': {
const audio = await ytmp3(url);
await client.sendMessage(m.chat, {document: audio, fileName: `${sanitizeFileName(video.title)}.mp3`, mimetype: 'audio/mpeg'}, { quoted: m });
break;
}
            
case 'mp4doc': {
const videoData = await ytmp4(url);
await client.sendMessage(m.chat, {document: videoData, fileName: `${sanitizeFileName(video.title)}.mp4`, mimetype: 'video/mp4' }, { quoted: m });
break;
}}} catch (e) {
console.error('Error:', e);
m.reply(`‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${e.message?.split('\n')[0] || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}` + e);
}
}
break;

case 'gitclone': {
const fetch = require('node-fetch')

if (!args[0]) {
return m.reply('Ingrese el enlace de un *repositorio* de *GitHub*\n\n`Ejemplo`: .gitclone https://github.com/AzamiJs/CuriosityBot-MD')
}
if (!args[0].includes('github.com')) {
return m.reply('Enlace no v√°lido. Compruebe el enlace')
}

m.reply(mess.wait)

try {
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
let [, user, repo] = args[0].match(regex1) || []
repo = repo.replace(/.git$/, '')
let urlGit = `https://api.github.com/repos/${user}/${repo}/zipball`
let filename = (await fetch(urlGit, { method: 'HEAD' })).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
client.sendMessage(m.chat, { document: { url: urlGit }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => m.reply('Ha ocurrido un error al intentar descargar sus archivos: ' + err))
} catch (e) {
return m.reply('Ha ocurrido un error al intentar descargar sus archivos: ' + e) 
}
}
break

case 'tiktok': {
const Tiktok = require('./lib/tiktok')
const tiktok = new Tiktok()
if (!text) return m.reply('Ingrese en enlace de un video de tiktok')
if (args[0] === 'search') {
    const results = await tiktok.search(args.slice(1).join(' '))
    if (results.length === 0) return m.reply('No se encontraron resultados para la consulta proporcionada')
    const text = results.map((result, index) => `\n‚îå  ‚ó¶  Resultado ${index + 1}\n‚îÇ  ‚ó¶ *T√≠tulo:* ${result.title}\n‚îÇ  ‚ó¶ *Subido:* ${result.creation}\n‚îî  ‚ó¶ *Vistas:* ${result.views_count}`).join('\n')
    return m.reply(`Resultados de b√∫squeda: ${args.slice(1).join(' ')}\n${text}`)
} else if (text) {
    const data = await tiktok.download(text)
    
    const txt = `*¬∑ T√≠tulo:* ${data.title || 'Sin t√≠tulo'}
*¬∑ Subido:* ${data.creation}
    
E S T A D O
*¬∑ Me gusta* ‚Äì ${data.like_count}
*¬∑ Comentarios* ‚Äì ${data.comment_count}
*¬∑ Compartidas* ‚Äì ${data.share_count}
*¬∑ Vistas* ‚Äì ${data.views_count}
*¬∑ Favoritos* ‚Äì ${data.favorite_count}
    
    ${global.wm}`
    if (data.media.type === 'image') {
    
    for (const image of data.media.images) {
    await client.sendMessage(m.chat, { image: { url: image }, caption: data.title })
    }
    } else if (data.media.type === 'video') {
    await client.sendMessage(m.chat, { video: { url: data.media.nowatermark.play }, caption: txt }, { quoted: m })
    await client.sendMessage(m.chat, { audio: { url: data.music.play }, mimetype: 'audio/mp4' }, { quoted: m })
    }

} else {
    const region = 'US'
    const trending = await tiktok.tend(region)
    
    const video = trending[Math.floor(Math.random() * trending.length)]
    const txt = `*¬∑ T√≠tulo:* ${video.title || 'Sin t√≠tulo'}
*¬∑ Subido:* ${video.creation}
    
E S T A D O
*¬∑ Me gusta* ‚Äì ${video.like_count}
*¬∑ Comentarios* ‚Äì ${video.comment_count}
*¬∑ Compartidas* ‚Äì ${video.share_count}
*¬∑ Vistas* ‚Äì ${video.views_count}
*¬∑ Favoritos* ‚Äì ${video.favorite_count}
    
${global.wm}`
await client.sendMessage(m.chat, { video: { url: video.media.nowatermark }, caption: txt }, { quoted: m })
}}
break

case 'facebook': 
case 'fb': {
const fetch = require('node-fetch')

if (!text) return m.reply('Ingrese un enlace de un *reel* de *Facebook*\n\n`Ejemplo`: .fb https://www.facebook.com/share/r/GB9op9yMyNUmFVH2/?mibextid=V2iOCx')
if (!text.includes('facebook')) return m.reply('Enlace no v√°lido. Compruebe el enlace')
m.reply(mess.wait)
try {
const apiUrl = `https://api.dorratz.com/fbvideo?url=${text}`;
const response = await fetch(apiUrl);
const data = await response.json();
if (data.result) {
const hdUrl = data.result.hd;
const sdUrl = data.result.sd;
const audioUrl = data.result.audio;        
const downloadUrl = hdUrl || sdUrl; 
const caption = `Video de Facebook`
await client.sendMessage(m.chat, { video: { url: downloadUrl }, mimetype: 'video/mp4', fileName: `video.mp4`, caption: caption, mentions: [m.sender], }, { quoted: m })
}} catch (e) {
m.reply('Ha ocurrido un error al descargar su video: ' + e)
}
}
break

case 'instagram':
case 'ig': {
    if (!text) return m.reply('Ingrese un enlace de un *reel* de *Instagram*\n\n`Ejemplo`: .ig https://www.instagram.com/reel/C8Z0mgHuD4d/?igsh=bzE0bGo0eHRxd2dx')
    if (!text.includes('instagram')) return m.reply('Enlace no v√°lido. Compruebe el enlace')
    m.reply(mess.wait)
    try {
        async function ig(a1) {
            const { data: a2 } = await axios.get(atob('aHR0cHM6Ly9zc3NpbnN0YWdyYW0uY29tL21zZWM='))
            const a3 = Math.floor(a2.msec * 1e3) || Date.now()
            const a4 = Date.now() - (a3 ? Date.now() - a3 : 0)
            
            const a5 = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(`${a1}${a4}${atob('MTllMDhmZjQyZjE4NTU5YjUxODI1Njg1ZDkxN2M1YzllOWQ4OWY4YTVjMWFiMTQ3ZjgyMGY0NmU5NGMzZGYyNg==')}`))
            const a6 = Array.from(new Uint8Array(a5)).map(a7 => a7.toString(16).padStart(2, '0')).join('')
            
            const { data: a8 } = await axios.post(atob('aHR0cHM6Ly9zc3NpbnN0YWdyYW0uY29tL2FwaS9jb252ZXJ0'), {
                url: a1, ts: a4, _ts: 1739186038417, _tsc: Date.now() - a3, _s: a6
            }, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'User-Agent': atob('TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMC4wLjAuMCBTYWZhcmkvNTM3LjM2'),
                    'Referer': atob('aHR0cHM6Ly9zc3NpbnN0YWdyYW0uY29tLw=='),
                    'Origin': atob('aHR0cHM6Ly9zc3NpbnN0YWdyYW0uY29tLw==')
                }
            })

            return a8
        }

        const result = await ig(text)
        const dec = input => Array.isArray(input) ? 'array' : (input && typeof input === 'object' ? 'object' : 'unknown')
        const media = input => input === 'jpg' ? 'image' : input === 'mp4' ? 'video' : false

        if (dec(result) === 'object' && media(result.url[0].type)) {
            const txt = `*¬∑ T√≠tulo:* ${result.meta.title || 'Sin t√≠tulo'}

*¬∑ Me gusta* ‚Äì ${result.meta.like_count}
*¬∑ Comentarios* ‚Äì ${result.meta.comment_count}
*¬∑ Creador* ‚Äì ${result.meta.username}
                
${global.wm}`
            await client.sendMessage(m.chat, { [media(result.url[0].type)]: { url: result.url[0].url }, caption: txt })
        }
    } catch (e) {
        m.reply('Ha ocurrido un error al descargar su solicitud: ' + e.message)
    }
}
break

case 'twiter':
case 'tw':
case 'x': {
const fg = require('api-dylux')

if (!text) {
return m.reply('Ingrese un *enlace* de *X*\n\n`Ejemplo`: .x https://twitter.com/fernandavasro/status/1569741835555291139?t=ADxk8P3Z3prq8USIZUqXCg&s=19') 
}
      
try {
let { SD, HD, desc, thumb, audio } = await fg.twitter(text)
await client.sendMessage(m.chat, { video: { url: HD }, caption: `${desc}`}, { quoted: m })
} catch (e) {
m.reply('Ha ocurrido un error al descargar su video de x: ' + e) 
console.log(e)
}
}
break

case 'gdrive':
case 'drive': {
const fg = require('api-dylux')

if (!text) {
return m.reply('Ingrese un *enlace* de *Drive*\n\n`Ejemplo`: .drive https://drive.google.com/file/d/1dmHlx1WTbH5yZoNa_ln325q5dxLn1QHU/view')
}

if (!text.includes('drive')) {
return m.reply('El enlace no es v√°lido. Compruebe el enlace')
}

try {
let res = await fg.GDriveDl(text)
client.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
} catch (e) {
m.reply('Ha ocurrido un error al descargar su documento: ' + e)
}
}
break

//grupos
case '–∞–¥–º–∏–Ω—ã': 
case 'admin': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!text) {
return m.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é *–ø—Ä–∏—á–∏–Ω—É*, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏*')
}
if (text.length < 10) {
return m.reply('–ü–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤')
}

const pp = await client.profilePictureUrl(m.chat, 'image').catch(_ => null) || 'https://qu.ax/OEgX.jpg'
const groupAdmins = participants.filter(p => p.admin)
const listaAdmins = groupAdmins.map((v, i) => `\`${i + 1}\` @${v.id.split('@')[0]}`).join('\n')
const owner = groupMetadata.owner || groupAdmins.find(p => p.admin === 'superadmin')?.id || m.chat.split`-`[0] + '@s.whatsapp.net'

let mensaje = args.join` `
let yo = `–°–æ–æ–±—â–µ–Ω–∏–µ: ${text}`
let texto = `${yo}

‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª –≥—Ä—É–ø–ø—ã ‚ö†Ô∏è
${listaAdmins}`.trim()
client.sendMessage(m.chat, { image: { url: pp }, caption: texto, mentions: [...groupAdmins.map(v => v.id), owner]}, { quoted: m })
}
break

case '–≥—Ä—É–ø–ø–∞':
case 'group': 
case 'settings': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

const isClose = { '–æ—Ç–∫—Ä—ã—Ç—å': '–Ω–µ_–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–∑–∞–∫—Ä—ã—Ç—å': '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'abierto': 'not_announcement', 'cerrado': 'announcement', 'abrir': 'not_announcement', 'cerrar': 'announcement', 'desbloquear': 'unlocked', 'bloquear': 'locked' }[(args[0] || '')]
if (isClose === undefined) { 
return m.reply('*–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã*\n\n`–ø—Ä–∏–º–µ—Ä`:\n‚óã –æ—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É\n‚óã  –≥—Ä—É–ø–ø–∞ –∑–∞–∫—Ä—ã—Ç—å\n‚óã !grupo bloquear\n‚óã !grupo desbloquear')
}
await client.groupSettingUpdate(m.chat, isClose)
{ m.reply('> –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ') }
}
break

case '–ø–æ–Ω–∏–∑–∏—Ç—å': 
case 'degradar': 
case 'quitaradmin': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

if (isNaN(text) && !text.match(/@/g)){
} else if (isNaN(text)) {
var number = text.split`@`[1]
} else if (!isNaN(text)) {
var number = text
}
if (!text && !m.quoted) {
return m.reply('–û—Ç–º–µ—Ç—å—Ç–µ *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ *–ø–æ–Ω–∏–∑–∏—Ç—å –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏*')
}
if (number.length > 13 || (number.length < 11 && number.length > 0)) {
return m.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä')
}
try {
if (text) {
var User = number + '@s.whatsapp.net'
} else if (m.quoted.sender) {
var User = m.quoted.sender
} else if (m.mentionedJid) {
var User = number + '@s.whatsapp.net'
} 
} catch (e) {
} finally {
client.groupParticipantsUpdate(m.chat, [User], '–ø–æ–Ω–∏–∑–∏—Ç—å')
m.reply('>–£—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏')
}
}
break

case '–ø—Ä–∏–∑—Ä–∞–∫–∏': {
const { areJidsSameUser } = require('@whiskeysockets/baileys')

if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

let member = participants.map(u => u.id)
if (!text) {
var sum = member.length
} else {
var sum = text} 
var total = 0
var sider = []
for (let i = 0; i < sum; i++) {
let users = m.isGroup ? participants.find(u => u.id == member[i]) : {}
if ((typeof global.db.data.users[member[i]] == 'undefined' || global.db.data.users[member[i]].chat == 0) && !users.isAdmin && !users.isSuperAdmin) { 
if (typeof global.db.data.users[member[i]] !== 'undefined'){
if (global.db.data.users[member[i]].whitelist == false){
total++
sider.push(member[i])}
} else {
total++
sider.push(member[i])}}}

if (total == 0) {
return m.reply('–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–Ω–∞')
}
client.sendMessage(m.chat, { text: `–°–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n${sider.map(v => '¬∑ @' + v.replace(/@.+/, '')).join('\n')}`, mentions: sider }) 
}
break

case 'hidetag':
case 'notificar':
case 'tag': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

if (!m.quoted && !text) {
return m.reply('–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ *—Ç–µ–∫—Å—Ç*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
}
try { 
client.sendMessage(m.chat, { forward: m.quoted.fakeObj, mentions: participants.map(a => a.id) })
} catch {  
client.sendMessage(m.chat, { text : text ? text : '' , mentions: participants.map(a => a.id)}, { quoted: null, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100})}
}
break

case '—É–¥–∞–ª–∏—Ç—å':
case 'kill': 
case 'matar': 
case 'sacar': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

if (!m.mentionedJid[0] && !m.quoted) {
return m.reply('–û—Ç–º–µ—Ç—å—Ç–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ *—á–µ–ª–æ–≤–µ–∫–∞*, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ *—É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ*')
}

let user = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender

const groupInfo = await client.groupMetadata(m.chat)
const ownerGroup = groupInfo.owner || m.chat.split`-`[0] + '@s.whatsapp.net'
const ownerBot = global.owner[0][0] + '@s.whatsapp.net'

if (user === client.user.jid) {
return m.reply('–Ø –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å *–±–æ—Ç–∞* –∏–∑ –≥—Ä—É–ø–ø—ã')
}

if (user === ownerGroup) {
return m.reply('–Ø –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å *–≤–ª–∞–¥–µ–ª—å—Ü–∞* –∏–∑ –≥—Ä—É–ø–ø—ã')
}

if (user === ownerBot) {
return m.reply('–Ø –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å *–≤–ª–∞–¥–µ–ª—å—Ü–∞* –±–æ—Ç–∞')
}

await client.groupParticipantsUpdate(m.chat, [user], '—É–¥–∞–ª–∏—Ç—å')
}
break

case '—Å—Å—ã–ª–∫–∞':
case 'enlace': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}
let group = m.chat
let linkk = 'https://chat.whatsapp.com/' + await client.groupInviteCode(group)
client.sendMessage(m.chat, {text: 'üö©\v' + linkk }, {quoted: m }, { detectLink: true })
}
break

case '–ø–æ–≤—ã—Å–∏—Ç—å': 
case 'promover': 
case 'daradmin': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

if (isNaN(text) && !text.match(/@/g)){
} else if (isNaN(text)) {
var number = text.split`@`[1]
} else if (!isNaN(text)) {
var number = text
}
if (!text && !m.quoted) {
return m.reply('–û—Ç–º–µ—Ç—å—Ç–µ *–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* , –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ *–ø–æ–≤—ã—Å–∏—Ç—å*')
}
if (number.length > 13 || (number.length < 11 && number.length > 0)) {
return m.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä')
}
try {
if (text) {
var User = number + '@s.whatsapp.net'
} else if (m.quoted.sender) {
var User = m.quoted.sender
} else if (m.mentionedJid) {
var User = number + '@s.whatsapp.net'
} 
} catch (e) {
} finally {
client.groupParticipantsUpdate(m.chat, [User], '–ø–æ–≤—ã—Å–∏—Ç—å')
m.reply('> –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
}
}
break

case '–≤—ã–∑–æ–≤': {
if (!m.isGroup) {
return m.reply(mess.group)
}

if (!isBotAdmins) {
return m.reply(mess.botAdmin)
}

if (!isAdmins) {
return m.reply(mess.admin)
}

let teks = `üö© *–ö–ª–∞—Å—Ç–µ—Ä-–≤—ã–∑–æ–≤*\n\n`
teks += `–°–æ–æ–±—â–µ–Ω–∏–µ: ${q ? q : `–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`}\n\n`
for (let mem of participants) {
teks += `- @${mem.id.split('@')[0]}\n`
}
client.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
}
break 
		
//propietarios 		
case "backup": {
const archiver = require('archiver');
try {
let d = new Date();
let date = d.toLocaleDateString('fr', {day: 'numeric',
month: 'long',
year: 'numeric'
});

const databaseFolder = './database'; 
const zipPath = './database_backup.zip';
const credsPath = './session/creds.json';

if (!fs.existsSync(databaseFolder)) return await m.reply('‚ö†Ô∏è –ü–∞–ø–∫–∞ *database* –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');      
if (!fs.existsSync(credsPath)) return await m.reply('‚ö†Ô∏è–§–∞–π–ª * creds. json* –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');      

await m.reply(`_*üóÇÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...*_`)

let output = fs.createWriteStream(zipPath);
let archive = archiver('zip', { zlib: { level: 9 } });

output.on('–∑–∞–∫—Ä—ã—Ç—å', async () => {
console.log(`–°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. zip: ${archive.pointer()} bytes`);

let creds = fs.readFileSync(credsPath);
await client.sendMessage(m.sender, {document: fs.readFileSync(zipPath), mimetype: 'application/zip',fileName: `database.zip`}, {quoted: m});
await client.sendMessage(m.sender, {document: creds, mimetype: 'application/json', fileName: `creds.json`}, {quoted: m});
fs.unlinkSync(zipPath);
});

archive.on('–æ—à–∏–±–∫–∞', (err) => { throw err; });
archive.pipe(output);
archive.directory(databaseFolder, false);
archive.finalize();
} catch (e) {
console.log(e);
await client.sendMessage(m.sender, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n' + e, { quoted: m });
}
}
break;

case 'getcase': {
if (!isCreator) {
return m.reply(mess.owner)
}
	
if (!text) {
return m.reply('Ingrese el *comando* que desea obtener *c√≥digo*\n\n`Ejemplo`: .getcase play')
}

try {
bbreak = 'break'
m.reply('case ' + `'${args[0]}'` + fs.readFileSync('./main.js').toString().split(`case '${args[0]}'`)[1].split(bbreak)[0] + bbreak)
} catch (e) { 
m.reply('Ha ocurrido un error al obtener el c√≥digo: ' + e)
} 
}
break

case 'addcase': {
if (!isCreator) {
return m.reply(mess.owner)
}
	
if (!text) {
return m.reply('–í–≤–µ–¥–∏—Ç–µ *–∫–æ–¥*, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –∫–∞–∫ * –∫–æ–º–∞–Ω–¥—É*')
}

try {
const addcase =[fs.readFileSync('main.js', 'utf8').slice(0, fs.readFileSync('main.js', 'utf8').lastIndexOf('break') + 5), q, fs.readFileSync('main.js', 'utf8').slice(fs.readFileSync('main.js', 'utf8').lastIndexOf('break') + 5)].join('\n')
fs.writeFileSync('main.js', addcase)
m.reply(`Comando:\n${text}\nAgregado con √©xito.`) 
} catch (e) {
return m.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: ' + e)
}
}
break

case '—Å–æ–µ–¥–∏–Ω—è—Ç—å': 
case 'unete': {
const linkRegex = /chat.whatsapp.com\/([0-9A-Za-z]{20,24})/i
const link = m.quoted?.text ?? text
const [_, code] = link.match(linkRegex) || []

if (!code) {
return m.reply('–í–≤–µ–¥–∏—Ç–µ *—Å—Å—ã–ª–∫—É* –≥—Ä—É–ø–ø—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π —è –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')
}
if (isCreator || m.fromMe) {
try {
const result = await client.groupAcceptInvite(code)
m.reply('–Ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è')
} catch (e) {
m.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ:' + e)
}
}
}
break

case 'update':
case 'actualizar':
case 'gitpull':
if (!isCreator) {
return m.reply(mess.owner)
}

try {
const stdout = execSync('–º–µ—Ä–∑–∞–≤–µ—Ü —Ç—è–Ω–µ—Ç' + (m.fromMe && q ? ' ' + q : ''))
let message = stdout.toString()
if (message.includes('–£–∂–µ –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π.')) message = '–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
if (message.includes('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ')) message = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n' + stdout.toString()
m.reply(message)
} catch (e) {
try {
const status = execSync('git status --porcelain')
if (status.length > 0) {
const conflictedFiles = status.toString().split('\n').filter(line => line.trim() !== '').map(line => {
if (line.includes('.npm/') || line.includes('.cache/') || line.includes('tmp/') || line.includes('session/') || line.includes('npm-debug.log')) {
return null
}
return '*‚Üí ' + line.slice(3) + '*'
}).filter(Boolean)
if (conflictedFiles.length > 0) {
const errorMessage = `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é\n\n –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n${conflictedFiles.join('\n')}`
await m.reply(errorMessage)
}
}
} catch (error) {
console.error(error)
let errorMessage2 = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
if (error.message) {
errorMessage2 += '\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ' + error.message
}
await m.reply(errorMessage2)
}
}
break

//sticker
case '—Å': case '—Å—Ç–∏–∫–µ—Ä': {
const d = new Date(new Date + 3600000)
const locale = 'es-ES'
const dias = d.toLocaleDateString(locale, {weekday: 'long'})
const fecha = d.toLocaleDateString(locale, {day: '2-digit', month: '2-digit', year: 'numeric'})

let sticker2 = `${wm}\n–ê–≤—Ç–æ—Ä:\nFecha:\nD√≠a:\nCreador:`
let sticker3 = `${vs}\n${pushname}\n${fecha}\n${dias}\n–ú–∏—Ö–∞–∏–ª`

if (/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/.test(mime)) {
media = await quoted.download()  
let encmedia = await client.sendImageAsSticker(m.chat, media, m, { packname: sticker2, author: sticker3, contextInfo: {forwardingScore: 9999999, isForwarded: true, externalAdReply:{ showAdAttribution: false, title: wm, mediaType: 2, sourceUrl: 'https://github.com/AzamiJs', thumbnailUrl: 'https://qu.ax/lFTW.jpeg'}}})
await fs.unlinkSync(encmedia)  
} else if (/–≤–∏–¥–µ–æ/.test(mime)) {
if ((quoted.msg || quoted).seconds > 20) {
return m.reply('–í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º')
}
media = await quoted.download()

let encmedia = await client.sendVideoAsSticker(m.chat, media, m, { packname: sticker2, author: sticker3, contextInfo: {forwardingScore: 9999999, isForwarded: true, externalAdReply:{ showAdAttribution: false, title: wm, mediaType: 2, sourceUrl: 'https://github.com/AzamiJs', thumbnailUrl: 'https://qu.ax/lFTW.jpeg'}}})
await new Promise((resolve) => setTimeout(resolve, 2000))
await fs.unlinkSync(encmedia)  
} else {
m.reply('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* –∏–ª–∏ *–≤–∏–¥–µ–æ*')
}
}
break

function ucapan() {
const time = moment.tz('America/Mexico_City').format('HH')
if (time >= 17) {
return 'Buenas noches'
} else if (time >= 15) {
return 'Buenas tardes'
} else if (time >= 11) {
return 'Buenas tardes'
} else if (time >= 4) {
return 'Buenos d√≠as'
} else {
return 'Buenas madrugadas'
}
}

async function GDriveDl(url) {
let id
if (!(url && url.match(/drive\.google/i))) throw 'Invalid URL'
id = (url.match(/\/?id=(.+)/i) || url.match(/\/d\/(.*?)\//))[1]
if (!id) throw 'ID Not Found'
const res = await fetch(`https://drive.google.com/uc?id=${id}&authuser=0&export=download`, {
method: 'post',
headers: {
'accept-encoding': 'gzip, deflate, br',
'content-length': 0,
'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
'origin': 'https://drive.google.com',
'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36',
'x-client-data': 'CKG1yQEIkbbJAQiitskBCMS2yQEIqZ3KAQioo8oBGLeYygE=',
'x-drive-first-party': 'DriveWebUi',
'x-json-requested': 'true'}})
const { fileName, sizeBytes, downloadUrl } = JSON.parse((await res.text()).slice(4))
if (!downloadUrl) throw 'Link Download Limit!'
const data = await fetch(downloadUrl)
if (data.status !== 200) throw data.statusText
return {downloadUrl, fileName, fileSize: formatSize(sizeBytes), mimetype: data.headers.get('content-type')}
}
		
async function remini(imageData, operation) {
return new Promise(async (resolve, reject) => {
const availableOperations = ['enhance', 'recolor', 'dehaze']
if (availableOperations.includes(operation)) {
operation = operation
} else {
operation = availableOperations[0]
}
const baseUrl = 'https://inferenceengine.vyro.ai/' + operation + '.vyro'
const formData = new FormData()
formData.append('image', Buffer.from(imageData), {filename: 'enhance_image_body.jpg', contentType: 'image/jpeg'})
formData.append('model_version', 1, {'Content-Transfer-Encoding': 'binary', contentType: 'multipart/form-data; charset=utf-8'})
formData.submit({url: baseUrl, host: 'inferenceengine.vyro.ai', path: '/' + operation, protocol: 'https:', headers: {'User-Agent': 'okhttp/4.9.3', Connection: 'Keep-Alive', 'Accept-Encoding': 'gzip'}},
function (err, res) {
if (err) reject(err)
const chunks = []
res.on('data', function (chunk) {chunks.push(chunk)})
res.on('end', function () {resolve(Buffer.concat(chunks))})
res.on('error', function (err) {
reject(err)
})},)})}
		
default:
     
if (budy.startsWith('>')) {
    if(!isCreator) return
    let evan
    let text = /await|return/gi.test(budy) ? `(async () => { ${budy.slice(1)} })()` : `${budy.slice(1)}`
    try {
        evan = await eval(text)
    } catch (e) {
        evan = e
    } finally {
        client.sendMessage(m.chat, { text: format(evan)})
    }
}
		
}
} catch (zam) {
console.log(zam)
}}

let file = require.resolve(__filename)
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(chalk.greenBright(`\n\n–Ø –æ–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª ${__filename}`))
delete require.cache[file]
require(file)
})
